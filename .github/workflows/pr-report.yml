name: PR Report Generator
on:
  workflow_dispatch:      # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write

    steps:
      - name: Generate PR Report
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            let report = '# PR Report\n\n';
            report += '| PR # | Title | Creator | Merged | Status | PR Check Status |\n';
            report += '|------|--------|---------|---------|---------|---------------------------|\n';

            for (const pr of prs.data) {
              // Get all statuses
              const statuses = await github.rest.repos.listCommitStatusesForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              // Find latest PR check status
              let PRCheckStatus = 'Not checked';
              const PRStatuses = statuses.data
                .filter(status => status.context === 'PR-Check')
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

              if (PRStatuses.length > 0) {
                const latestStatus = PRStatuses[0];
                if (latestStatus.description === 'Rules do not apply') {
                  PRCheckStatus = 'N/A (Rules do not apply)';
                } else {
                  PRCheckStatus = `${latestStatus.state} (${latestStatus.description})`;
                }
              }

              // Get PR details and determine closure status
              let prStatus = 'Open';
              let mergedStatus = 'No';
              if (pr.merged_at) {
                const prDetails = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                const mergeDate = new Date(pr.merged_at).toISOString().split('T')[0];
                mergedStatus = 'Yes';
                prStatus = `by ${prDetails.data.merged_by ? prDetails.data.merged_by.login : 'Unknown'} on ${mergeDate}`;
              } else if (pr.closed_at) {
                // Check if it was closed by PR check
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                });
                
                const PRClosure = comments.data.find(
                  comment => comment.body.includes('ðŸš« This PR has been automatically closed because rules were not followed')
                );
                
                const closeDate = new Date(pr.closed_at).toISOString().split('T')[0];
                if (PRClosure) {
                  prStatus = `Closed by PR Check on ${closeDate}`;
                } else {
                  prStatus = `Closed manually on ${closeDate}`;
                }
              }

              report += `| #${pr.number} | ${pr.title.replace(/\|/g, '\\|')} | ${pr.user.login} | ${mergedStatus} | ${prStatus} | ${PRCheckStatus} |\n`;
            }

            // Get current date in YYYY-MM-DD format
            const date = new Date().toISOString().split('T')[0];
            
            // Create new report issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `PR Report (${date})`,
              body: report,
              labels: ['pr-report']
            }); 
