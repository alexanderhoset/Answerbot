name: PR Report Generator

# Version: 1.0.1

# Only allow one report to run at a time across the entire repository
concurrency:
  group: pr-report-workflow
  cancel-in-progress: true
# Configuration for report generation
env:
  # Report title and headers
  REPORT_TITLE: "PR Report"
  REPORT_TABLE_HEADER: "| PR # | Title | Creator | Merged | Status | PR Check Status |"
  REPORT_TABLE_DIVIDER: "|------|--------|---------|---------|---------|---------------------------|"
  
  # Status messages
  PR_STATUS_NOT_CHECKED: "Not checked"
  PR_STATUS_RULES_DONT_APPLY: "N/A (Rules do not apply)"
  PR_STATUS_OPEN: "Open"
  PR_STATUS_MERGED_YES: "Yes"
  PR_STATUS_MERGED_NO: "No"
  PR_STATUS_UNKNOWN: "Unknown"
  
  # Date format strings
  DATE_FORMAT: "nb-NO"  # Can be changed to other locales as needed
  
  # Issue settings
  ISSUE_LABEL: "pr-report"
  ISSUE_TITLE_PREFIX: "PR Report"

on:
  workflow_dispatch:      # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write

    steps:
      - name: Generate Report
        id: generate_report
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            let report = `# ${process.env.REPORT_TITLE}\n\n`;
            report += `${process.env.REPORT_TABLE_HEADER}\n`;
            report += `${process.env.REPORT_TABLE_DIVIDER}\n`;
            
            for (const pr of prs.data) {
              let statuses;
              try {
                statuses = await github.rest.repos.listCommitStatusesForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: pr.head.sha
                });
              } catch (error) {
                statuses = { data: [] };
              }

              let PRCheckStatus = process.env.PR_STATUS_NOT_CHECKED;
              const PRStatuses = statuses.data
                .filter(status => status.context === 'PR-Check')
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

              if (PRStatuses.length > 0) {
                const latestStatus = PRStatuses[0];
                if (latestStatus.description === 'Rules do not apply') {
                  PRCheckStatus = process.env.PR_STATUS_RULES_DONT_APPLY;
                } else {
                  PRCheckStatus = `${latestStatus.state} (${latestStatus.description})`;
                }
              }

              // Get PR details and determine closure status
              let prStatus = process.env.PR_STATUS_OPEN;
              let mergedStatus = process.env.PR_STATUS_MERGED_NO;
              
              try {
                if (pr.merged_at) {
                  const prDetails = await github.rest.pulls.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number
                  });
                  const mergeDate = new Date(pr.merged_at).toLocaleDateString(process.env.DATE_FORMAT);
                  mergedStatus = process.env.PR_STATUS_MERGED_YES;
                  const mergedBy = prDetails.data.merged_by ? prDetails.data.merged_by.login : process.env.PR_STATUS_UNKNOWN;
                  prStatus = `by ${mergedBy} on ${mergeDate}`;
                } else if (pr.closed_at) {
                  const closeDate = new Date(pr.closed_at).toLocaleDateString(process.env.DATE_FORMAT);
                  prStatus = `Closed on ${closeDate}`;
                }
              } catch (error) {
                // Use default values in case of error
                prStatus = 'Error loading status';
              }

              report += `| #${pr.number} | ${pr.title.replace(/\|/g, '\\|')} | ${pr.user.login} | ${mergedStatus} | ${prStatus} | ${PRCheckStatus} |\n`;
            }

            // Format current date
            const currentDate = new Date().toLocaleDateString(process.env.DATE_FORMAT, {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });
            
            // Create new report issue
            const issueTitle = `${process.env.ISSUE_TITLE_PREFIX} (${currentDate})`;
            
            // Close any existing open report issues
            try {
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: process.env.ISSUE_LABEL,
                state: 'open'
              });
              
              for (const issue of existingIssues.data) {
                if (issue.title.startsWith(process.env.ISSUE_TITLE_PREFIX)) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    state: 'closed'
                  });
                }
              }
            } catch (closeError) {
              // Continue with creating new issue even if closing old ones fails
            }
            
            // Create the new report issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: report,
              labels: [process.env.ISSUE_LABEL]
            });
