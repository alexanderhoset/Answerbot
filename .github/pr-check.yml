name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]  # Added synchronize to handle new commits
  issue_comment:
    types: [created, edited]  # Added edited to catch comment updates

jobs:
  PR-check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      statuses: write

    steps:
      - name: Set or Update Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const statusMessage = context.payload.action === 'synchronize' 
              ? 'New changes detected, verification required' 
              : 'Waiting for reviewer response';
              
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'pending',
              context: 'PR-check',
              description: statusMessage
            });

      - name: Post Question
        if: github.event_name == 'pull_request'
        id: post_question
        uses: actions/github-script@v7
        with:
          script: |
            let messageBody = '### Code Review Question\nDid you follow the rules?\n\nPlease reply with:\n- `/answer yes` - Rules were followed\n- `/answer no` - Rules were not followed\n- `/answer n/a` - Rules do not apply to this PR';

            // Add appropriate headers based on the action
            if (context.payload.action === 'synchronize') {
              messageBody = 'ðŸ”” **New Verification Required**\n\nNew commits have been pushed. Please verify the changes again.\n\n' + messageBody;
            } else if (context.payload.action === 'reopened') {
              messageBody = 'ðŸ”” **PR Reopened**\n\nThis PR has been reopened. Please verify the changes.\n\n' + messageBody;
            }

            // Always post a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: messageBody
            });
            
      - name: Validate Answer Format
        if: github.event_name == 'issue_comment'
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            
            // Only process comments that start with /answer
            if (!comment.startsWith('/answer')) {
              core.setOutput('valid', 'false');
              return;
            }
            
            const answer = comment.replace('/answer', '').trim();
            
            // Add eyes reaction to the comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });
            
            core.setOutput('valid', 'true');
            core.setOutput('answer', answer);

      - name: Update Status
        if: github.event_name == 'issue_comment' && steps.validate.outputs.valid == 'true'
        id: status
        uses: actions/github-script@v7
        with:
          script: |
            const answer = '${{ steps.validate.outputs.answer }}';
            let state = 'error';
            let description = 'Invalid response';
            
            if (answer === 'yes') {
              state = 'success';
              description = 'Rules were followed';
            } else if (answer === 'no') {
              state = 'failure';
              description = 'Rules were not followed';
            } else if (answer === 'n/a') {
              state = 'success';
              description = 'Rules do not apply';
            }
            
            // Get the PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Set the status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.data.head.sha,
              state: state,
              context: 'PR-check',
              description: description
            });

            core.setOutput('state', state);
            core.setOutput('answer', answer);
